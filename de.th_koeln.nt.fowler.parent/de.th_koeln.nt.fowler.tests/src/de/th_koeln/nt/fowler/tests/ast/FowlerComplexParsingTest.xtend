/*
 * generated by Xtext 2.12.0
 */
package de.th_koeln.nt.fowler.tests.ast

import com.google.inject.Inject
import de.th_koeln.nt.fowler.fowler.FowlerFactory
import de.th_koeln.nt.fowler.fowler.Statemachine
import de.th_koeln.nt.fowler.tests.FowlerInjectorProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

import static de.th_koeln.nt.fowler.tests.ContainsEObject.containsEObject
import static org.hamcrest.CoreMatchers.not
import static org.hamcrest.MatcherAssert.assertThat

@RunWith(typeof(XtextRunner))
@InjectWith(typeof(FowlerInjectorProvider))
class FowlerComplexParsingTest {
	@Inject extension ParseHelper<Statemachine>
	@Inject extension ValidationTestHelper

	@Inject FowlerFactory astFactory

	def String trafficLightControl() {
		'''
			events
				buttonPressed BP
				timeExpired TE
				waited W
			end
			
			resetEvents
				timeExpired
			end
			
			commands
				carLightRed CLR
				carLightYellow CLY
				carLightGreen CLG
				
				pedestrianLightRed PLR
				pedestrianLightGreen PLG
				
				start4Sec S4S
				start20Sec S20S
			end
			
			state idle
				actions {carLightGreen pedestrianLightRed}
				buttonPressed => wait1
			end
			
			state wait1
				actions{carLightYellow pedestrianLightRed start4Sec}
				waited => idle
			end
		'''
	}

	@Test def void commandsAreCreated() {
		trafficLightControl.parse => [
			Assert.assertNotNull("Das Result ist nicht null.", it)
			assertNoErrors
			assertThat("AST is not empty.", not(it.eAllContents.empty))
			assertThat("State is created", it.eAllContents, containsEObject(astFactory.createCommand => [
				name = "carLightRed"
				code = "CLR"
			]))
			assertThat("State is created", it.eAllContents, containsEObject(astFactory.createCommand => [
				name = "carLightYellow"
				code = "CLY"
			]))
			assertThat("State is created", it.eAllContents, containsEObject(astFactory.createCommand => [
				name = "carLightGreen"
				code = "CLG"
			]))
			assertThat("State is created", it.eAllContents, containsEObject(astFactory.createCommand => [
				name = "pedestrianLightRed"
				code = "PLR"
			]))
			assertThat("State is created", it.eAllContents, containsEObject(astFactory.createCommand => [
				name = "pedestrianLightGreen"
				code = "PLG"
			]))
			assertThat("State is created", it.eAllContents, containsEObject(astFactory.createCommand => [
				name = "start4Sec"
				code = "S4S"
			]))
			assertThat("State is created", it.eAllContents, containsEObject(astFactory.createCommand => [
				name = "start20Sec"
				code = "S20S"
			]))
		]
	}

	@Test def void eventsAreCreated() {
		trafficLightControl.parse => [
			Assert.assertNotNull("Das Result ist nicht null.", it)
			assertNoErrors
			assertThat("AST is not empty.", not(it.eAllContents.empty))
			assertThat("Event is created", it.eAllContents, containsEObject(astFactory.createEvent => [
				name = "buttonPressed"
				code = "BP"
			]))
			assertThat("Event is created", it.eAllContents, containsEObject(astFactory.createEvent => [
				name = "timeExpired"
				code = "TE"
			]))
			assertThat("Event is created", it.eAllContents, containsEObject(astFactory.createEvent => [
				name = "waited"
				code = "W"
			]))
		]
	}

	@Test def void resetEventsAreCreated() {
		trafficLightControl.parse => [
			Assert.assertNotNull("Das Result ist nicht null.", it)
			assertNoErrors
			assertThat("AST is not empty.", not(it.eAllContents.empty))
			assertThat("ResetEvent is created", it.resetEvents.iterator, containsEObject(astFactory.createEvent => [
				name = "timeExpired"
				code = "TE"
			]))
		]
	}
}
