/*
 * generated by Xtext 2.12.0
 */
package de.th_koeln.nt.fowler.tests.ast

import com.google.inject.Inject
import de.th_koeln.nt.fowler.fowler.FowlerFactory
import de.th_koeln.nt.fowler.fowler.Statemachine
import de.th_koeln.nt.fowler.tests.FowlerInjectorProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static de.th_koeln.nt.fowler.tests.ContainsEObject.containsEObject
import static org.hamcrest.MatcherAssert.assertThat
import static org.hamcrest.Matchers.not

@ExtendWith(InjectionExtension)
@InjectWith(typeof(FowlerInjectorProvider))
class FowlerSimpleParsingTest {
	@Inject extension ParseHelper<Statemachine>
	@Inject extension ValidationTestHelper

	@Inject FowlerFactory astFactory

	@Test
	def void loadModel() {
		'''
			events
				reset R0
			end
		'''.parse => [
			Assertions.assertNotNull(it, "Das Result ist nicht null.")
			Assertions.assertTrue(it.eResource.errors.isEmpty, "Beim Parsen sind Fehler aufgetreten.")
		]
	}
	
	@Test
	def void errorsAreFound() {
		'''
			wrong text
		'''.parse => [
			Assertions.assertNotNull(it, "Das Result ist nicht null.")
			assertThat("Beim Parsen sind keine Fehler aufgetreten.", not(it.eResource.errors.isEmpty))
		]
	}
	

	@Test
	def void eventsAreCreated() {
		'''
			events
				reset R0
			end
		'''.parse => [
			Assertions.assertNotNull(it, "Das Result ist null.")
			assertNoErrors
			assertThat("Event is not created", it.eAllContents, containsEObject(astFactory.createEvent => [code="R0" name="reset"]))
		]
	}
	
	@Test def void statesAreCreated() {
		'''
			state S0
			end
		'''.parse => [
			Assertions.assertNotNull(it, "Das Result ist null.")
			assertNoErrors
			assertThat("AST is empty.", not(it.eAllContents.empty))
			assertThat("State is not created", it.eAllContents, containsEObject(astFactory.createState => [name="S0"]))
		]
	}
	
	@Test def void commandsAreCreated() {
		'''
			commands
				command1 C1
			end
		'''.parse => [
			Assertions.assertNotNull(it, "Das Result ist null.")
			assertNoErrors
			assertThat("AST is empty.", not(it.eAllContents.empty))
			assertThat("State is not created", it.eAllContents, containsEObject(astFactory.createCommand => [name="command1" code="C1"]))
		]
	}
}
